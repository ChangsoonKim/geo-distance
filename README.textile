h1. GeoDistance - geo distance calculations

Calculates the Geographical shortest distance between two locations using longitude and latitude. 
This is done using "pure" Math formulas without resorting to Database provided functionality

This gem is meant to be a replacement for those geo distance utils out there that use built in SQL DB functionality for their calculations!

The formulas curently supported are

* _Haversine_ 
* _Spherical_ 
* _Vincenty_ 
* _NVector_ 
* _Flat_ 

The algorithm is specified using a symbol of either: [:flat, :haversine, :spherical, :vincenty, :nvector]

h2. Install

in Gemfile:

@gem 'geo-distance'@ 

Run bundler:

@$ bundle@

h2. Usage example (Rspec 2)

<pre>require 'geo-distance'

describe GeoDistance::Haversine do
  let(:from) do 
    [45, 10].geo_point
  end

  let(:to) do   
    b = [42, 11].geo_point
  end

  describe '#distance' do
    it "should calculate haversine distance as Float" do

      # specify units using :units option, fx :units => :miles
      dist = GeoDistance::Haversine.distance(from, to) 
      dist.should be_a(Float)

      puts "the distance from #{from} to #{to} is: #{dist.kms_to(:meters)} meters"

      dist.should be_within(4).of 340
    end
  end

  describe '#geo_distance' do
    it "should calculate haversine distance as GeoDistance" do
      dist = GeoDistance::Haversine.geo_distance(from, to)
      dist.should be_a(GeoDistance)

      puts "the distance from #{from} to #{to} is: #{dist.meters} meters"

      dist.kms.should be_within(4).of 340
    end
  end
  
  it "should set default_algorithm to :haversine" do
    GeoDistance.default_algorithm = :haversine

    dist = GeoDistance.distance(from, to, :units => :miles)
    geo_dist = GeoDistance.geo_distance(from, to, :units => :meters)
  end  
end
</pre>   

h2. Distance API

The call to _geo_distance_ returns an instance of GeoDistance

@dist = GeoDistance::Haversine.geo_distance( lat1, lon1, lat2, lon2 )@

The #kms, #meters, #miles and #feet methods return the length in the given unit.

h3. Setting default algorithm

You can also set a default algorithm to use...
The following will use the _Haversine_ algorithm:

<pre>
  GeoDistance.default_algorithm = :haversine
  dist = GeoDistance.distance( lat1, lon1, lat2, lon2 )  
  dist2 = GeoDistance.distance( [lat1, lon1], [lat2, lon2] )  
</pre>

Note that _GeoDistance_ uses "geo_point":https://github.com/kristianmandrup/geo_point for parsing arguments into two GeoPoints (point A to point B). 
It can handle: Numeric, Array, Hash, String (even in DMS format). See geo_point for more...

GeoDistance can be used in "mongoid_geo":https://github.com/kristianmandrup/mongoid-geo gem, as a distance calculator (in case the internal Mongo DB calculation is not used). 

h2. Contributing to geo-distance
 
* Check out the specs and add specs to spec any added features or changes!
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

h2. Copyright

Copyright (c) 2011 Kristian Mandrup. See LICENSE.txt for
further details.

